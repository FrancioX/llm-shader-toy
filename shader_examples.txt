Example 1
----
Description: A symmetrical golden fractal pattern radiating light beams outward from its center, creating a glowing mandala-like structure against a dark background. Uses KIFS functions.

Code:
#version 300 es
precision highp float;

uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_mouse;
uniform vec4 u_mouse_button;
uniform sampler2D u_buffer0;
uniform sampler2D u_buffer1;
uniform sampler2D u_buffer2;
uniform sampler2D u_buffer3;

out vec4 out_color;

// ShaderToy compatibility
#define iResolution u_resolution
#define iTime u_time
#define iMouse u_mouse
#define iMouseButton u_mouse_button
#define iChannel0 u_buffer0
#define iChannel1 u_buffer1
#define iChannel2 u_buffer2
#define iChannel3 u_buffer3

void main()  {
    vec2 p = (2.0*gl_FragCoord.xy-iResolution.xy)/iResolution.y;
    vec2 mp = iMouse.xy/iResolution.xy*0.5+0.5;

    float s = 1.0;
    for (int i=0; i < 7; i++) {
        s = max(s,abs(p.x)-0.375);
        p = abs(p*2.25)-mp*1.25;
        p *= mat2(cos(iTime+mp.x),-sin(iTime+mp.y),sin(iTime+mp.y),cos(iTime+mp.x));
    }

    vec3 col = vec3(4.0,2.0,1.0)/abs(atan(p.y,p.x))/s;

    out_color = vec4(col,1.0);
}

Example 2
----
Description: A bright central cross with rainbow-colored lens flares and chromatic aberration effects radiating outward in a symmetrical pattern against a dark background.

Code:
#version 300 es
precision highp float;

uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_mouse;
uniform vec4 u_mouse_button;
uniform sampler2D u_buffer0;
uniform sampler2D u_buffer1;
uniform sampler2D u_buffer2;
uniform sampler2D u_buffer3;

out vec4 out_color;

// ShaderToy compatibility
#define iResolution u_resolution
#define iTime u_time
#define iMouse u_mouse
#define iMouseButton u_mouse_button
#define iChannel0 u_buffer0
#define iChannel1 u_buffer1
#define iChannel2 u_buffer2
#define iChannel3 u_buffer3

void main() {
    vec3 c;
    float l,z=iTime;
    for(int i=0;i<3;i++) {
        vec2 uv,p=gl_FragCoord.xy/iResolution.xy;
        uv=p;
        p-=.5;
        p.x*=iResolution.x/iResolution.y;
        z+=.07;
        l=length(p);
        uv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z-z));
        c[i]=.01/length(mod(uv,1.)-.5);
    }
    out_color=vec4(c/l,iTime);
}

Example 3
----
Description: Three glowing orbs with soft colorful auras (pink, cyan, and yellow) floating inside a dark rectangular space with blurred rainbow-colored edges creating an ethereal, neon atmosphere.

Code:
#version 300 es
precision highp float;

uniform vec2 u_resolution;
uniform float u_time;
uniform vec2 u_mouse;
uniform vec4 u_mouse_button;
uniform sampler2D u_buffer0;
uniform sampler2D u_buffer1;
uniform sampler2D u_buffer2;
uniform sampler2D u_buffer3;

out vec4 out_color;

// ShaderToy compatibility
#define iResolution u_resolution
#define iTime u_time
#define iMouse u_mouse
#define iMouseButton u_mouse_button
#define iChannel0 u_buffer0
#define iChannel1 u_buffer1
#define iChannel2 u_buffer2
#define iChannel3 u_buffer3

float beat = 0.;
float mb(vec2 p1, vec2 p0) { return (0.04+beat)/(pow(p1.x-p0.x,2.)+pow(p1.y-p0.y,2.)); }

void main()
{
    float ct = iTime;
    if ((ct > 8.0 && ct < 33.5)
    || (ct > 38.0 && ct < 88.5)
    || (ct > 93.0 && ct < 194.5))
    beat = pow(sin(ct*3.1416*3.78+1.9)*0.5+0.5,15.0)*0.05;

    vec2 mbr,mbg,mbb;
    vec2 p = (2.0*gl_FragCoord.xy-iResolution.xy)/iResolution.y;
    vec2 o = vec2(pow(p.x,2.),pow(p.y,2.));
    vec3 col = vec3(pow(2.*abs(o.x+o.y)+abs(o.x-o.y),5.));
    col = max(col,1.);
    float iTime=iTime+beat*2.;

    float t2=iTime*2.0,t3=iTime*3.0,s2=sin(t2),s3=sin(t3),s4=sin(iTime*4.0),c2=cos(t2),c3=cos(t3); // Let me extend this line a little more with an useless comment :-)

    mbr = mbg = mbb = vec2(0.);
    mbr += vec2(0.10*s4+0.40*c3,0.40*s2 +0.20*c3);
    mbg += vec2(0.15*s3+0.30*c2,0.10*-s4+0.30*c3);
    mbb += vec2(0.10*s3+0.50*c3,0.10*-s4+0.50*c2);

    col.r *= length(mbr.xy-p.xy);
    col.g *= length(mbg.xy-p.xy);
    col.b *= length(mbb.xy-p.xy);
    col   *= pow(mb(mbr,p)+mb(mbg,p)+mb(mbb,p),1.75);

    out_color = vec4(col,1.);
}

